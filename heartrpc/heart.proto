/*
Copyright (C) 2015-2018 Lightning Labs and The Lightning Network Developers

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
syntax = "proto3";

package heartrpc;

option go_package = "github.com/TheRebelOfBabylon/weirwood/heartrpc";

// HeartTree is the main RPC server of the daemon.
service HeartTree {
    /* heartcli: `stop`
    StopDaemon will send a shutdown request to the interrupt handler, triggering
    a graceful shutdown of the daemon.
    */
    rpc StopDaemon (StopRequest) returns (StopResponse);
    /* heartcli: `test`
    TestCommand will send a string response regardless if a macaroon is provided or not.
    */
    rpc TestCommand (TestRequest) returns (TestResponse);
    /* heartcli: `admintest`
    AdminTest will send a string response only if a macaroon is provided.
    */
    rpc AdminTest (AdminTestRequest) returns (stream AdminTestResponse);
    /* heartcli: `addnode`
    AddNode takes the user inputted onion address with format validonionaddreess.onion:port of another node and adds it to a list of known nodes.
    */
    rpc AddNode (AddNodeRequest) returns (AddNodeResponse);
    /* heartcli: `deletenode`
    DeleteNode takes the user inputted onion address of a node and removes it from the list of known nodes.
    */
    rpc DeleteNode (DeleteNodeRequest) returns (DeleteNodeResponse);
    /* heartcli: `listnodes`
    ListNodes returns a list of all nodes in the list
    */
    rpc ListNodes (ListNodesRequest) returns (stream GetInfoResponse);
    /* heartcli: `getinfo`
    GetInfo returns general information about the given node including it's capabilities, prices, etc. 
    If no address is given, it is assumed to be the localhost node
    */
    rpc GetInfo (GetInfoRequest) returns (GetInfoResponse);
    /*
    SeedFile takes a SeedFileRequest including a filename, filesize and upon payment, returns TCP upload information. Upon successful download, returns a magnet link
    */
    rpc SeedFile (SeedFileRequest) returns (stream SeedFileResponse);
    /* heartcli: `getfilekey`
    GetFileKey returns a key for decrypting a given file
    */
    /* heartcli: `encryptfile`
    EncryptFile creates a new encryption key, and encrypts a given file
    */
}

message StopRequest {
}
message StopResponse {
}
message TestRequest {
}
message TestResponse {
    string msg = 1;
}
message AdminTestRequest {
}
message AdminTestResponse {
    string msg = 1;
}
message AddNodeRequest {
    // validonionaddress.onion:port of the seeder
    string onion_addr = 1;
}
message AddNodeResponse {
}
message DeleteNodeRequest {
    string onion_addr = 1;
}
message DeleteNodeResponse {
}
message ListNodesRequest {}
message GetInfoRequest {
    // optional if not given, returns information about this node
    string onion_addr = 1;
}
enum NodeState {
    SEEDING = 0;
    CURATING = 1;
    BOTH = 2;
}
message GetInfoResponse {
    // onion address of the node. If none is given, assume localhost
    string onion_addr = 1;
    // boolean indicating if node is seeding, curating or both
    NodeState node_state = 2;
    // mSat price per byte for seeding a file. 0 if not charging for this
    double seeding_price_per_byte = 3;
    // mSat price for decrypting a seeded file. 0 if not charging for this
    int64 file_decrypting_price = 4;
    // Amount of available space in bytes for new files
    int64 avaible_byte_space = 5;
    // mSat price for listing on the node database. 0 if not charging for this
    int64 list_price = 6;
    // mSat price for getting a list of seeders and their prices. 0 if not charging for this
    int64 get_list_of_seeders_price = 7;
}
message SeedFileRequest {
    string file_name = 1;
    int64 file_size = 2;
}
enum UploadState {
    STARTED = 0;
    IN_PROGRESS = 1;
    FINISHED = 2;
    FAILED = 3;
}
message SeedFileResponse {
    string tcp_addr = 1;
    UploadState upload_state = 2;
    string magnet_link = 3;
}